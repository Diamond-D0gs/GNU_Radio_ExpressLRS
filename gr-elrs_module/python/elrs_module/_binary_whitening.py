import pmt
import numpy as np
from gnuradio import gr
from threading import Lock
from typing import Optional

WHITENING_SEQ = [
    0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE1, 0xC2, 0x85, 0x0B, 0x17, 0x2F, 0x5E, 0xBC, 0x78, 0xF1, 0xE3,
    0xC6, 0x8D, 0x1A, 0x34, 0x68, 0xD0, 0xA0, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x11, 0x23, 0x47,
    0x8E, 0x1C, 0x38, 0x71, 0xE2, 0xC4, 0x89, 0x12, 0x25, 0x4B, 0x97, 0x2E, 0x5C, 0xB8, 0x70, 0xE0,
    0xC0, 0x81, 0x03, 0x06, 0x0C, 0x19, 0x32, 0x64, 0xC9, 0x92, 0x24, 0x49, 0x93, 0x26, 0x4D, 0x9B,
    0x37, 0x6E, 0xDC, 0xB9, 0x72, 0xE4, 0xC8, 0x90, 0x20, 0x41, 0x82, 0x05, 0x0A, 0x15, 0x2B, 0x56,
    0xAD, 0x5B, 0xB6, 0x6D, 0xDA, 0xB5, 0x6B, 0xD6, 0xAC, 0x59, 0xB2, 0x65, 0xCB, 0x96, 0x2C, 0x58,
    0xB0, 0x61, 0xC3, 0x87, 0x0F, 0x1F, 0x3E, 0x7D, 0xFB, 0xF6, 0xED, 0xDB, 0xB7, 0x6F, 0xDE, 0xBD,
    0x7A, 0xF5, 0xEB, 0xD7, 0xAE, 0x5D, 0xBA, 0x74, 0xE8, 0xD1, 0xA2, 0x44, 0x88, 0x10, 0x21, 0x43,
    0x86, 0x0D, 0x1B, 0x36, 0x6C, 0xD8, 0xB1, 0x63, 0xC7, 0x8F, 0x1E, 0x3C, 0x79, 0xF3, 0xE7, 0xCE,
    0x9C, 0x39, 0x73, 0xE6, 0xCC, 0x98, 0x31, 0x62, 0xC5, 0x8B, 0x16, 0x2D, 0x5A, 0xB4, 0x69, 0xD2,
    0xA4, 0x48, 0x91, 0x22, 0x45, 0x8A, 0x14, 0x29, 0x52, 0xA5, 0x4A, 0x95, 0x2A, 0x54, 0xA9, 0x53,
    0xA7, 0x4E, 0x9D, 0x3B, 0x77, 0xEE, 0xDD, 0xBB, 0x76, 0xEC, 0xD9, 0xB3, 0x67, 0xCF, 0x9E, 0x3D,
    0x7B, 0xF7, 0xEF, 0xDF, 0xBF, 0x7E, 0xFD, 0xFA, 0xF4, 0xE9, 0xD3, 0xA6, 0x4C, 0x99, 0x33, 0x66,
    0xCD, 0x9A, 0x35, 0x6A, 0xD4, 0xA8, 0x51, 0xA3, 0x46, 0x8C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x07,
    0x0E, 0x1D, 0x3A, 0x75, 0xEA, 0xD5, 0xAA, 0x55, 0xAB, 0x57, 0xAF, 0x5F, 0xBE, 0x7C, 0xF9, 0xF2,
    0xE5, 0xCA, 0x94, 0x28, 0x50, 0xA1, 0x42, 0x84, 0x09, 0x13, 0x27, 0x4F, 0x9F, 0x3F, 0x7F
]

class binary_whitening(gr.basic_block):
    def __init__(self):
        gr.basic_block.__init__(self,
            name="Binary Whitening",
            in_sig=None,
            out_sig=[np.uint8]
        )

        self._lock = Lock()
        self._payload_queue: list[bytes] = []

        self.message_port_register_in(pmt.intern('in')) # type: ignore
        self.set_msg_handler(pmt.intern('in'), self._msg_handler) # type: ignore

    def _msg_handler(self, msg) -> None: # type: ignore
        if not pmt.is_u8vector(msg): # type: ignore
            raise Exception('\'msg\' is not pmt of type u8vector!')
        
        msg_bytes = bytes(pmt.u8vector_elements(msg)) # type: ignore
        with self._lock:
            self._payload_queue.append(msg_bytes)

    def general_work(self, input_items, output_items):
        # The number of items we can produce is the size of the output buffer.
        # This is no longer an argument for a gr.basic_block.
        noutput_items = len(output_items[0])
        out = output_items[0]
        msg_bytes: Optional[bytes] = None

        with self._lock:
            if len(self._payload_queue) > 0:
                # The required length is 2 bytes out for every 1 byte in
                needed_len = len(self._payload_queue[0]) * 2
                
                # Check against the available output buffer space
                if needed_len <= noutput_items:
                    # Use pop(0) for FIFO behavior (process in order of arrival)
                    msg_bytes = self._payload_queue.pop(0)
                else:
                    # Not enough space, tell scheduler to wait and call us again later
                    return 0
            else:
                # No messages in the queue, nothing to do
                return 0
        
        if msg_bytes:
            output_len = len(msg_bytes) * 2
            self.add_item_tag(0, self.nitems_written(0), pmt.intern('frame_len'), pmt.from_long(output_len)) # type: ignore
            self.add_item_tag(0, self.nitems_written(0), pmt.intern('payload_str'), pmt.intern('')) # type: ignore

            for i in range(len(msg_bytes)):
                temp = (WHITENING_SEQ[i] ^ msg_bytes[i]) & 0xFF
                out[i * 2] = temp & 0x0F
                out[(i * 2) + 1] = (temp >> 4) & 0x0F
            
            # Return the number of items we actually produced
            return output_len
        
        return 0