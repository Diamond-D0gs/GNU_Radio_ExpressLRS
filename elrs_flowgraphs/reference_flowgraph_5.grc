options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: elrs_transmitter
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: bandwidth
  id: variable
  parameters:
    comment: ''
    value: 125e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 20.0]
    rotation: 0
    state: enabled
- name: binding_phrase
  id: variable
  parameters:
    comment: ''
    value: '"TestBindingPhrase"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 28.0]
    rotation: 0
    state: enabled
- name: counter
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 28.0]
    rotation: 0
    state: enabled
- name: cr
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 20.0]
    rotation: 0
    state: enabled
- name: crc
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 20.0]
    rotation: 0
    state: enabled
- name: disable
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1544, 28.0]
    rotation: 0
    state: enabled
- name: freq_center
  id: variable
  parameters:
    comment: ''
    value: '914700000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 28.0]
    rotation: 0
    state: enabled
- name: freq_count
  id: variable
  parameters:
    comment: ''
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 28.0]
    rotation: 0
    state: enabled
- name: freq_start
  id: variable
  parameters:
    comment: ''
    value: freq_center - (wide_samp_rate // 2)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 28.0]
    rotation: 0
    state: enabled
- name: freq_stop
  id: variable
  parameters:
    comment: ''
    value: freq_center + (wide_samp_rate // 2)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 28.0]
    rotation: 0
    state: enabled
- name: freq_temp
  id: variable
  parameters:
    comment: ''
    value: freq_center
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 28.0]
    rotation: 0
    state: enabled
- name: freq_temp_1
  id: variable
  parameters:
    comment: ''
    value: freq_center
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 116.0]
    rotation: 0
    state: true
- name: freq_temp_2
  id: variable
  parameters:
    comment: ''
    value: freq_center
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 116.0]
    rotation: 0
    state: true
- name: freq_temp_3
  id: variable
  parameters:
    comment: ''
    value: freq_center
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 204.0]
    rotation: 0
    state: true
- name: freq_temp_4
  id: variable
  parameters:
    comment: ''
    value: freq_center
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 196.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: bandwidth*2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 20.0]
    rotation: 0
    state: enabled
- name: sf
  id: variable
  parameters:
    comment: ''
    value: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 20.0]
    rotation: 0
    state: enabled
- name: wide_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 926900000 - 903500000
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 28.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq_temp - 3.7e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 556.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq_temp_1 - 3.7e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 540.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq_temp_1 - 3.7e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 1012.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq_temp_1 - 3.7e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 1204.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq_temp_1 - 3.7e3
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: wide_samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1648, 1020.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '5'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1984, 112.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1944, 496.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/gabriel/GNU_Radio_ExpressLRS/results/elrs_0
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2608, 484.0]
    rotation: 0
    state: true
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("")
    period: 1000 // 50
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 132.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: freq_temp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 308.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: freq_temp_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 428.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: freq_temp_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 892.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0_0_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: freq_temp_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 1084.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0_0_0_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: freq_temp_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2136, 900.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 448.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 712.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 1184.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1400, 1384.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0_0_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2104, 1200.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import pmt\nimport numpy as np\nfrom gnuradio import gr\nfrom hashlib\
      \ import md5\n\nclass fhss_controller(gr.sync_block):\n    # This is the corrected\
      \ line with default values\n    def __init__(self, binding_phrase=\"\", freq_start=0.0,\
      \ freq_stop=0.0, freq_count=1, freq_center=0.0, disable=False):\n        gr.sync_block.__init__(self,\n\
      \            name='FHSS Controller',\n            in_sig=None,\n           \
      \ out_sig=None)\n        \n        # Store parameters passed from GRC\n    \
      \    self.binding_phrase = binding_phrase\n        self.freq_start = freq_start\n\
      \        self.freq_stop = freq_stop\n        self.freq_count = freq_count\n\
      \        self.freq_center = freq_center\n        self.disable = disable\n  \
      \      self.switch = False\n\n        # Register message ports\n        self.message_port_register_in(pmt.intern(\"\
      msg_in\"))\n        self.message_port_register_out(pmt.intern(\"msg_out\"))\n\
      \        self.set_msg_handler(pmt.intern(\"msg_in\"), self.handle_msg)\n\n \
      \       # --- Setup logic from your script ---\n        self.FHSS_SEQUENCE_LEN\
      \ = 256\n        self.OTA_VERSION_ID = 6\n        \n        if self.freq_count\
      \ > 1:\n            self.freq_spread = abs(self.freq_stop - self.freq_start)\
      \ // (self.freq_count - 1)\n        else:\n            self.freq_spread = 0\
      \ # Provide a safe default\n\n        # Add another check for the next line\n\
      \        if self.freq_count > 0:\n            self.num_primary_bands = (self.FHSS_SEQUENCE_LEN\
      \ // self.freq_count) * self.freq_count\n        else:\n            self.num_primary_bands\
      \ = 0 # Provide a safe default\n\n        uid_bytes = md5(self.binding_phrase.encode()).digest()[0:6]\n\
      \        self.seed = (uid_bytes[2] << 24) | (uid_bytes[3] << 16) | (uid_bytes[4]\
      \ << 8) | (uid_bytes[5] ^ self.OTA_VERSION_ID)\n        self.freq_sequence =\
      \ [0] * self.num_primary_bands\n        self.fhss_index = 0\n        \n    \
      \    self.build_random_fhss_sequence()\n\n    def elrs_rng(self):\n        self.seed\
      \ = (0x343FD * self.seed + 0x269EC3) % 0x80000000\n        return self.seed\
      \ >> 16\n    \n    def build_random_fhss_sequence(self):\n        # Only build\
      \ if freq_count is valid\n        if self.freq_count < 2: return\n\n       \
      \ for i in range(self.num_primary_bands):\n            self.freq_sequence[i]\
      \ = i % self.freq_count\n        \n        for i in range(1, self.num_primary_bands):\n\
      \             if (i % self.freq_count) != 0:\n                offset = (i //\
      \ self.freq_count) * self.freq_count\n                rand = (self.elrs_rng()\
      \ % (self.freq_count - 1)) + 1\n                self.freq_sequence[i], self.freq_sequence[offset\
      \ + rand] = self.freq_sequence[offset + rand], self.freq_sequence[i]\n\n   \
      \ def handle_msg(self, msg):\n        if not self.disable:\n            if self.switch:\n\
      \                current_freq_index = self.freq_sequence[self.fhss_index]\n\
      \                absolute_freq = self.freq_start + (current_freq_index * self.freq_spread)\n\
      \                freq_offset = absolute_freq - self.freq_center\n\n        \
      \        key = pmt.intern(\"freq_temp\")\n                value = pmt.from_double(freq_offset\
      \ + 3.7e6) # Temp fix\n                output_msg = pmt.cons(key, value)\n\n\
      \                self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\
      \                \n                self.fhss_index += 1\n                self.fhss_index\
      \ %= self.num_primary_bands\n\n            self.switch = not self.switch\n \
      \       else:\n            key = pmt.intern(\"freq_temp\")\n            value\
      \ = pmt.from_double(self.freq_center + 3.7e6) # Temp fix\n            output_msg\
      \ = pmt.cons(key, value)\n\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), output_msg)\n\n    def work(self, input_items, output_items):\n\
      \        return 0"
    affinity: ''
    alias: ''
    binding_phrase: binding_phrase + "0"
    comment: ''
    disable: disable
    freq_center: freq_center
    freq_count: freq_count
    freq_start: freq_start
    freq_stop: freq_stop
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('FHSS Controller', 'fhss_controller', [('binding_phrase', "''"), ('freq_start',
      '0.0'), ('freq_stop', '0.0'), ('freq_count', '1'), ('freq_center', '0.0'), ('disable',
      'False')], [('msg_in', 'message', 1)], [('msg_out', 'message', 1)], '', ['binding_phrase',
      'disable', 'freq_center', 'freq_count', 'freq_start', 'freq_stop'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 268.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "import pmt\nimport numpy as np\nfrom gnuradio import gr\nfrom hashlib\
      \ import md5\n\nclass fhss_controller(gr.sync_block):\n    # This is the corrected\
      \ line with default values\n    def __init__(self, binding_phrase=\"\", freq_start=0.0,\
      \ freq_stop=0.0, freq_count=1, freq_center=0.0, disable=False):\n        gr.sync_block.__init__(self,\n\
      \            name='FHSS Controller',\n            in_sig=None,\n           \
      \ out_sig=None)\n        \n        # Store parameters passed from GRC\n    \
      \    self.binding_phrase = binding_phrase\n        self.freq_start = freq_start\n\
      \        self.freq_stop = freq_stop\n        self.freq_count = freq_count\n\
      \        self.freq_center = freq_center\n        self.disable = disable\n  \
      \      self.switch = False\n\n        # Register message ports\n        self.message_port_register_in(pmt.intern(\"\
      msg_in\"))\n        self.message_port_register_out(pmt.intern(\"msg_out\"))\n\
      \        self.set_msg_handler(pmt.intern(\"msg_in\"), self.handle_msg)\n\n \
      \       # --- Setup logic from your script ---\n        self.FHSS_SEQUENCE_LEN\
      \ = 256\n        self.OTA_VERSION_ID = 6\n        \n        if self.freq_count\
      \ > 1:\n            self.freq_spread = abs(self.freq_stop - self.freq_start)\
      \ // (self.freq_count - 1)\n        else:\n            self.freq_spread = 0\
      \ # Provide a safe default\n\n        # Add another check for the next line\n\
      \        if self.freq_count > 0:\n            self.num_primary_bands = (self.FHSS_SEQUENCE_LEN\
      \ // self.freq_count) * self.freq_count\n        else:\n            self.num_primary_bands\
      \ = 0 # Provide a safe default\n\n        uid_bytes = md5(self.binding_phrase.encode()).digest()[0:6]\n\
      \        self.seed = (uid_bytes[2] << 24) | (uid_bytes[3] << 16) | (uid_bytes[4]\
      \ << 8) | (uid_bytes[5] ^ self.OTA_VERSION_ID)\n        self.freq_sequence =\
      \ [0] * self.FHSS_SEQUENCE_LEN\n        self.fhss_index = 0\n        \n    \
      \    self.build_random_fhss_sequence()\n\n    def elrs_rng(self):\n        self.seed\
      \ = (0x343FD * self.seed + 0x269EC3) % 0x80000000\n        return self.seed\
      \ >> 16\n    \n    def build_random_fhss_sequence(self):\n        # Only build\
      \ if freq_count is valid\n        if self.freq_count < 2: return\n\n       \
      \ for i in range(self.num_primary_bands):\n            self.freq_sequence[i]\
      \ = i % self.freq_count\n        \n        for i in range(1, self.num_primary_bands):\n\
      \             if (i % self.freq_count) != 0:\n                offset = (i //\
      \ self.freq_count) * self.freq_count\n                rand = (self.elrs_rng()\
      \ % (self.freq_count - 1)) + 1\n                self.freq_sequence[i], self.freq_sequence[offset\
      \ + rand] = self.freq_sequence[offset + rand], self.freq_sequence[i]\n\n   \
      \ def handle_msg(self, msg):\n        if not self.disable:\n            if self.switch:\n\
      \                current_freq_index = self.freq_sequence[self.fhss_index]\n\
      \                absolute_freq = self.freq_start + (current_freq_index * self.freq_spread)\n\
      \                freq_offset = absolute_freq - self.freq_center\n\n        \
      \        key = pmt.intern(\"freq_temp\")\n                value = pmt.from_double(freq_offset\
      \ + 3.7e6) # Temp fix\n                output_msg = pmt.cons(key, value)\n\n\
      \                self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\
      \                \n                self.fhss_index = (self.fhss_index + 1) %\
      \ self.freq_count\n\n            self.switch = not self.switch\n        else:\n\
      \            key = pmt.intern(\"freq_temp\")\n            value = pmt.from_double(self.freq_center\
      \ + 3.7e6) # Temp fix\n            output_msg = pmt.cons(key, value)\n\n   \
      \         self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\n   \
      \ def work(self, input_items, output_items):\n        return 0"
    affinity: ''
    alias: ''
    binding_phrase: binding_phrase + "1"
    comment: ''
    disable: disable
    freq_center: freq_center
    freq_count: freq_count
    freq_start: freq_start
    freq_stop: freq_stop
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('FHSS Controller', 'fhss_controller', [('binding_phrase', "''"), ('freq_start',
      '0.0'), ('freq_stop', '0.0'), ('freq_count', '1'), ('freq_center', '0.0'), ('disable',
      'False')], [('msg_in', 'message', 1)], [('msg_out', 'message', 1)], '', ['binding_phrase',
      'disable', 'freq_center', 'freq_count', 'freq_start', 'freq_stop'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 380.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "import pmt\nimport numpy as np\nfrom gnuradio import gr\nfrom hashlib\
      \ import md5\n\nclass fhss_controller(gr.sync_block):\n    # This is the corrected\
      \ line with default values\n    def __init__(self, binding_phrase=\"\", freq_start=0.0,\
      \ freq_stop=0.0, freq_count=1, freq_center=0.0, disable=False):\n        gr.sync_block.__init__(self,\n\
      \            name='FHSS Controller',\n            in_sig=None,\n           \
      \ out_sig=None)\n        \n        # Store parameters passed from GRC\n    \
      \    self.binding_phrase = binding_phrase\n        self.freq_start = freq_start\n\
      \        self.freq_stop = freq_stop\n        self.freq_count = freq_count\n\
      \        self.freq_center = freq_center\n        self.disable = disable\n  \
      \      self.switch = False\n\n        # Register message ports\n        self.message_port_register_in(pmt.intern(\"\
      msg_in\"))\n        self.message_port_register_out(pmt.intern(\"msg_out\"))\n\
      \        self.set_msg_handler(pmt.intern(\"msg_in\"), self.handle_msg)\n\n \
      \       # --- Setup logic from your script ---\n        self.FHSS_SEQUENCE_LEN\
      \ = 256\n        self.OTA_VERSION_ID = 6\n        \n        if self.freq_count\
      \ > 1:\n            self.freq_spread = abs(self.freq_stop - self.freq_start)\
      \ // (self.freq_count - 1)\n        else:\n            self.freq_spread = 0\
      \ # Provide a safe default\n\n        # Add another check for the next line\n\
      \        if self.freq_count > 0:\n            self.num_primary_bands = (self.FHSS_SEQUENCE_LEN\
      \ // self.freq_count) * self.freq_count\n        else:\n            self.num_primary_bands\
      \ = 0 # Provide a safe default\n\n        uid_bytes = md5(self.binding_phrase.encode()).digest()[0:6]\n\
      \        self.seed = (uid_bytes[2] << 24) | (uid_bytes[3] << 16) | (uid_bytes[4]\
      \ << 8) | (uid_bytes[5] ^ self.OTA_VERSION_ID)\n        self.freq_sequence =\
      \ [0] * self.FHSS_SEQUENCE_LEN\n        self.fhss_index = 0\n        \n    \
      \    self.build_random_fhss_sequence()\n\n    def elrs_rng(self):\n        self.seed\
      \ = (0x343FD * self.seed + 0x269EC3) % 0x80000000\n        return self.seed\
      \ >> 16\n    \n    def build_random_fhss_sequence(self):\n        # Only build\
      \ if freq_count is valid\n        if self.freq_count < 2: return\n\n       \
      \ for i in range(self.num_primary_bands):\n            self.freq_sequence[i]\
      \ = i % self.freq_count\n        \n        for i in range(1, self.num_primary_bands):\n\
      \             if (i % self.freq_count) != 0:\n                offset = (i //\
      \ self.freq_count) * self.freq_count\n                rand = (self.elrs_rng()\
      \ % (self.freq_count - 1)) + 1\n                self.freq_sequence[i], self.freq_sequence[offset\
      \ + rand] = self.freq_sequence[offset + rand], self.freq_sequence[i]\n\n   \
      \ def handle_msg(self, msg):\n        if not self.disable:\n            if self.switch:\n\
      \                current_freq_index = self.freq_sequence[self.fhss_index]\n\
      \                absolute_freq = self.freq_start + (current_freq_index * self.freq_spread)\n\
      \                freq_offset = absolute_freq - self.freq_center\n\n        \
      \        key = pmt.intern(\"freq_temp\")\n                value = pmt.from_double(freq_offset\
      \ + 3.7e6) # Temp fix\n                output_msg = pmt.cons(key, value)\n\n\
      \                self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\
      \                \n                self.fhss_index = (self.fhss_index + 1) %\
      \ self.freq_count\n\n            self.switch = not self.switch\n        else:\n\
      \            key = pmt.intern(\"freq_temp\")\n            value = pmt.from_double(self.freq_center\
      \ + 3.7e6) # Temp fix\n            output_msg = pmt.cons(key, value)\n\n   \
      \         self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\n   \
      \ def work(self, input_items, output_items):\n        return 0"
    affinity: ''
    alias: ''
    binding_phrase: binding_phrase + "2"
    comment: ''
    disable: disable
    freq_center: freq_center
    freq_count: freq_count
    freq_start: freq_start
    freq_stop: freq_stop
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('FHSS Controller', 'fhss_controller', [('binding_phrase', "''"), ('freq_start',
      '0.0'), ('freq_stop', '0.0'), ('freq_count', '1'), ('freq_center', '0.0'), ('disable',
      'False')], [('msg_in', 'message', 1)], [('msg_out', 'message', 1)], '', ['binding_phrase',
      'disable', 'freq_center', 'freq_count', 'freq_start', 'freq_stop'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 844.0]
    rotation: 0
    state: enabled
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "import pmt\nimport numpy as np\nfrom gnuradio import gr\nfrom hashlib\
      \ import md5\n\nclass fhss_controller(gr.sync_block):\n    # This is the corrected\
      \ line with default values\n    def __init__(self, binding_phrase=\"\", freq_start=0.0,\
      \ freq_stop=0.0, freq_count=1, freq_center=0.0, disable=False):\n        gr.sync_block.__init__(self,\n\
      \            name='FHSS Controller',\n            in_sig=None,\n           \
      \ out_sig=None)\n        \n        # Store parameters passed from GRC\n    \
      \    self.binding_phrase = binding_phrase\n        self.freq_start = freq_start\n\
      \        self.freq_stop = freq_stop\n        self.freq_count = freq_count\n\
      \        self.freq_center = freq_center\n        self.disable = disable\n  \
      \      self.switch = False\n\n        # Register message ports\n        self.message_port_register_in(pmt.intern(\"\
      msg_in\"))\n        self.message_port_register_out(pmt.intern(\"msg_out\"))\n\
      \        self.set_msg_handler(pmt.intern(\"msg_in\"), self.handle_msg)\n\n \
      \       # --- Setup logic from your script ---\n        self.FHSS_SEQUENCE_LEN\
      \ = 256\n        self.OTA_VERSION_ID = 6\n        \n        if self.freq_count\
      \ > 1:\n            self.freq_spread = abs(self.freq_stop - self.freq_start)\
      \ // (self.freq_count - 1)\n        else:\n            self.freq_spread = 0\
      \ # Provide a safe default\n\n        # Add another check for the next line\n\
      \        if self.freq_count > 0:\n            self.num_primary_bands = (self.FHSS_SEQUENCE_LEN\
      \ // self.freq_count) * self.freq_count\n        else:\n            self.num_primary_bands\
      \ = 0 # Provide a safe default\n\n        uid_bytes = md5(self.binding_phrase.encode()).digest()[0:6]\n\
      \        self.seed = (uid_bytes[2] << 24) | (uid_bytes[3] << 16) | (uid_bytes[4]\
      \ << 8) | (uid_bytes[5] ^ self.OTA_VERSION_ID)\n        self.freq_sequence =\
      \ [0] * self.FHSS_SEQUENCE_LEN\n        self.fhss_index = 0\n        \n    \
      \    self.build_random_fhss_sequence()\n\n    def elrs_rng(self):\n        self.seed\
      \ = (0x343FD * self.seed + 0x269EC3) % 0x80000000\n        return self.seed\
      \ >> 16\n    \n    def build_random_fhss_sequence(self):\n        # Only build\
      \ if freq_count is valid\n        if self.freq_count < 2: return\n\n       \
      \ for i in range(self.num_primary_bands):\n            self.freq_sequence[i]\
      \ = i % self.freq_count\n        \n        for i in range(1, self.num_primary_bands):\n\
      \             if (i % self.freq_count) != 0:\n                offset = (i //\
      \ self.freq_count) * self.freq_count\n                rand = (self.elrs_rng()\
      \ % (self.freq_count - 1)) + 1\n                self.freq_sequence[i], self.freq_sequence[offset\
      \ + rand] = self.freq_sequence[offset + rand], self.freq_sequence[i]\n\n   \
      \ def handle_msg(self, msg):\n        if not self.disable:\n            if self.switch:\n\
      \                current_freq_index = self.freq_sequence[self.fhss_index]\n\
      \                absolute_freq = self.freq_start + (current_freq_index * self.freq_spread)\n\
      \                freq_offset = absolute_freq - self.freq_center\n\n        \
      \        key = pmt.intern(\"freq_temp\")\n                value = pmt.from_double(freq_offset\
      \ + 3.7e6) # Temp fix\n                output_msg = pmt.cons(key, value)\n\n\
      \                self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\
      \                \n                self.fhss_index = (self.fhss_index + 1) %\
      \ self.freq_count\n\n            self.switch = not self.switch\n        else:\n\
      \            key = pmt.intern(\"freq_temp\")\n            value = pmt.from_double(self.freq_center\
      \ + 3.7e6) # Temp fix\n            output_msg = pmt.cons(key, value)\n\n   \
      \         self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\n   \
      \ def work(self, input_items, output_items):\n        return 0"
    affinity: ''
    alias: ''
    binding_phrase: binding_phrase + "3"
    comment: ''
    disable: disable
    freq_center: freq_center
    freq_count: freq_count
    freq_start: freq_start
    freq_stop: freq_stop
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('FHSS Controller', 'fhss_controller', [('binding_phrase', "''"), ('freq_start',
      '0.0'), ('freq_stop', '0.0'), ('freq_count', '1'), ('freq_center', '0.0'), ('disable',
      'False')], [('msg_in', 'message', 1)], [('msg_out', 'message', 1)], '', ['binding_phrase',
      'disable', 'freq_center', 'freq_count', 'freq_start', 'freq_stop'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 1036.0]
    rotation: 0
    state: enabled
- name: epy_block_0_3
  id: epy_block
  parameters:
    _source_code: "import pmt\nimport numpy as np\nfrom gnuradio import gr\nfrom hashlib\
      \ import md5\n\nclass fhss_controller(gr.sync_block):\n    # This is the corrected\
      \ line with default values\n    def __init__(self, binding_phrase=\"\", freq_start=0.0,\
      \ freq_stop=0.0, freq_count=1, freq_center=0.0, disable=False):\n        gr.sync_block.__init__(self,\n\
      \            name='FHSS Controller',\n            in_sig=None,\n           \
      \ out_sig=None)\n        \n        # Store parameters passed from GRC\n    \
      \    self.binding_phrase = binding_phrase\n        self.freq_start = freq_start\n\
      \        self.freq_stop = freq_stop\n        self.freq_count = freq_count\n\
      \        self.freq_center = freq_center\n        self.disable = disable\n  \
      \      self.switch = False\n\n        # Register message ports\n        self.message_port_register_in(pmt.intern(\"\
      msg_in\"))\n        self.message_port_register_out(pmt.intern(\"msg_out\"))\n\
      \        self.set_msg_handler(pmt.intern(\"msg_in\"), self.handle_msg)\n\n \
      \       # --- Setup logic from your script ---\n        self.FHSS_SEQUENCE_LEN\
      \ = 256\n        self.OTA_VERSION_ID = 6\n        \n        if self.freq_count\
      \ > 1:\n            self.freq_spread = abs(self.freq_stop - self.freq_start)\
      \ // (self.freq_count - 1)\n        else:\n            self.freq_spread = 0\
      \ # Provide a safe default\n\n        # Add another check for the next line\n\
      \        if self.freq_count > 0:\n            self.num_primary_bands = (self.FHSS_SEQUENCE_LEN\
      \ // self.freq_count) * self.freq_count\n        else:\n            self.num_primary_bands\
      \ = 0 # Provide a safe default\n\n        uid_bytes = md5(self.binding_phrase.encode()).digest()[0:6]\n\
      \        self.seed = (uid_bytes[2] << 24) | (uid_bytes[3] << 16) | (uid_bytes[4]\
      \ << 8) | (uid_bytes[5] ^ self.OTA_VERSION_ID)\n        self.freq_sequence =\
      \ [0] * self.FHSS_SEQUENCE_LEN\n        self.fhss_index = 0\n        \n    \
      \    self.build_random_fhss_sequence()\n\n    def elrs_rng(self):\n        self.seed\
      \ = (0x343FD * self.seed + 0x269EC3) % 0x80000000\n        return self.seed\
      \ >> 16\n    \n    def build_random_fhss_sequence(self):\n        # Only build\
      \ if freq_count is valid\n        if self.freq_count < 2: return\n\n       \
      \ for i in range(self.num_primary_bands):\n            self.freq_sequence[i]\
      \ = i % self.freq_count\n        \n        for i in range(1, self.num_primary_bands):\n\
      \             if (i % self.freq_count) != 0:\n                offset = (i //\
      \ self.freq_count) * self.freq_count\n                rand = (self.elrs_rng()\
      \ % (self.freq_count - 1)) + 1\n                self.freq_sequence[i], self.freq_sequence[offset\
      \ + rand] = self.freq_sequence[offset + rand], self.freq_sequence[i]\n\n   \
      \ def handle_msg(self, msg):\n        if not self.disable:\n            if self.switch:\n\
      \                current_freq_index = self.freq_sequence[self.fhss_index]\n\
      \                absolute_freq = self.freq_start + (current_freq_index * self.freq_spread)\n\
      \                freq_offset = absolute_freq - self.freq_center\n\n        \
      \        key = pmt.intern(\"freq_temp\")\n                value = pmt.from_double(freq_offset\
      \ + 3.7e6) # Temp fix\n                output_msg = pmt.cons(key, value)\n\n\
      \                self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\
      \                \n                self.fhss_index = (self.fhss_index + 1) %\
      \ self.freq_count\n\n            self.switch = not self.switch\n        else:\n\
      \            key = pmt.intern(\"freq_temp\")\n            value = pmt.from_double(self.freq_center\
      \ + 3.7e6) # Temp fix\n            output_msg = pmt.cons(key, value)\n\n   \
      \         self.message_port_pub(pmt.intern(\"msg_out\"), output_msg)\n\n   \
      \ def work(self, input_items, output_items):\n        return 0"
    affinity: ''
    alias: ''
    binding_phrase: binding_phrase + "4"
    comment: ''
    disable: disable
    freq_center: freq_center
    freq_count: freq_count
    freq_start: freq_start
    freq_stop: freq_stop
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('FHSS Controller', 'fhss_controller', [('binding_phrase', "''"), ('freq_start',
      '0.0'), ('freq_stop', '0.0'), ('freq_count', '1'), ('freq_center', '0.0'), ('disable',
      'False')], [('msg_in', 'message', 1)], [('msg_out', 'message', 1)], '', ['binding_phrase',
      'disable', 'freq_center', 'freq_count', 'freq_start', 'freq_stop'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 852.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import pmt\nimport numpy as np\nfrom gnuradio import gr\n\nclass\
      \ counter_formatter(gr.sync_block):\n    \"\"\"\n    Receives a trigger message.\
      \ On each trigger, it formats a string\n    with the value of a 'counter' variable\
      \ from the top_block,\n    sends it as a new message, and increments the counter.\n\
      \    \"\"\"\n    def __init__(self, packet_count: int = 999):\n        gr.sync_block.__init__(self,\n\
      \            name='Counter Formatter',\n            in_sig=None,\n         \
      \   out_sig=None)\n\n        self.counter = 0\n        self.packet_count = packet_count\n\
      \        self.message_port_register_in(pmt.intern(\"msg_in\"))\n        self.message_port_register_out(pmt.intern(\"\
      msg_out\"))\n        self.set_msg_handler(pmt.intern(\"msg_in\"), self.handle_msg)\n\
      \n    def handle_msg(self, msg):\n        if self.counter < self.packet_count:\n\
      \            # 1. Format the string using the flowgraph's 'counter' variable\n\
      \            # Note: self.counter works because the 'counter' Variable block\n\
      \            # creates a 'self.counter' attribute on the main flowgraph class.\n\
      \            payload_str = str(f'{self.counter:05d}\\n')\n\n            # 2.\
      \ Create the new PMT message\n            output_msg = pmt.intern(payload_str)\n\
      \n            # 3. Publish the new message\n            self.message_port_pub(pmt.intern(\"\
      msg_out\"), output_msg)\n            \n            # 4. Increment the counter\
      \ for the next time\n            self.counter += 1\n            if self.counter\
      \ == self.packet_count:\n                print('Counter Formatter: Done.')\n\
      \n    def work(self, input_items, output_items):\n        # This block only\
      \ processes messages, so work() does nothing.\n        return 0"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    packet_count: '2000'
  states:
    _io_cache: ('Counter Formatter', 'counter_formatter', [('packet_count', '999')],
      [('msg_in', 'message', 1)], [('msg_out', 'message', 1)], "\n    Receives a trigger
      message. On each trigger, it formats a string\n    with the value of a 'counter'
      variable from the top_block,\n    sends it as a new message, and increments
      the counter.\n    ", ['packet_count'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 140.0]
    rotation: 0
    state: enabled
- name: lora_rx_0
  id: lora_rx
  parameters:
    affinity: ''
    alias: ''
    bw: int(bandwidth)
    comment: ''
    cr: '1'
    has_crc: 'True'
    impl_head: 'True'
    ldro: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    pay_len: '6'
    print_rx: '[True,True]'
    samp_rate: int(samp_rate)
    sf: '7'
    soft_decoding: 'True'
    sync_word: '[0x12]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2312, 460.0]
    rotation: 0
    state: enabled
- name: lora_tx_0
  id: lora_tx
  parameters:
    affinity: ''
    alias: ''
    bw: int(bandwidth)
    comment: ''
    cr: '1'
    frame_zero_padd: '1280'
    has_crc: 'True'
    impl_head: 'True'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: int(samp_rate)
    sf: '7'
    sync_word: '[0x12]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 92.0]
    rotation: 0
    state: true
- name: lora_tx_0_0
  id: lora_tx
  parameters:
    affinity: ''
    alias: ''
    bw: int(bandwidth)
    comment: ''
    cr: '1'
    frame_zero_padd: '1280'
    has_crc: 'True'
    impl_head: 'True'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: int(samp_rate)
    sf: '7'
    sync_word: '[0x12]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 212.0]
    rotation: 0
    state: enabled
- name: lora_tx_0_0_0
  id: lora_tx
  parameters:
    affinity: ''
    alias: ''
    bw: int(bandwidth)
    comment: ''
    cr: '1'
    frame_zero_padd: '1280'
    has_crc: 'True'
    impl_head: 'True'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: int(samp_rate)
    sf: '7'
    sync_word: '[0x12]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 684.0]
    rotation: 0
    state: enabled
- name: lora_tx_0_0_0_0
  id: lora_tx
  parameters:
    affinity: ''
    alias: ''
    bw: int(bandwidth)
    comment: ''
    cr: '1'
    frame_zero_padd: '1280'
    has_crc: 'True'
    impl_head: 'True'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: int(samp_rate)
    sf: '7'
    sync_word: '[0x12]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 876.0]
    rotation: 0
    state: enabled
- name: lora_tx_0_0_0_0_0
  id: lora_tx
  parameters:
    affinity: ''
    alias: ''
    bw: int(bandwidth)
    comment: ''
    cr: '1'
    frame_zero_padd: '1280'
    has_crc: 'True'
    impl_head: 'True'
    ldro: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: int(samp_rate)
    sf: '7'
    sync_word: '[0x12]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1832, 692.0]
    rotation: 0
    state: enabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: freq_stop - freq_start
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: (freq_stop + freq_start) / 2
    fftsize: '512'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '0'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.01'
    wintype: window.WIN_RECTANGULAR
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2128, 220.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    fbw: '0.04'
    interp: '448'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 420.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '448'
    fbw: '0.04'
    interp: '5'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2096, 484.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    fbw: '0.04'
    interp: '448'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 684.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_1_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    fbw: '0.04'
    interp: '448'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 1156.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_1_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    fbw: '0.04'
    interp: '448'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 1348.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_1_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    fbw: '0.04'
    interp: '448'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1872, 1164.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 140.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 260.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 732.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 924.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2080, 740.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: message
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 140.0]
    rotation: 0
    state: enabled
- name: virtual_sink_2
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 596.0]
    rotation: 0
    state: enabled
- name: virtual_sink_2_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 580.0]
    rotation: 0
    state: enabled
- name: virtual_sink_2_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 1052.0]
    rotation: 0
    state: enabled
- name: virtual_sink_2_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 1244.0]
    rotation: 0
    state: enabled
- name: virtual_sink_2_0_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1896, 1060.0]
    rotation: 0
    state: enabled
- name: virtual_sink_3
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 460.0]
    rotation: 0
    state: enabled
- name: virtual_sink_3_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 724.0]
    rotation: 0
    state: enabled
- name: virtual_sink_3_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 1196.0]
    rotation: 0
    state: enabled
- name: virtual_sink_3_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1552, 1388.0]
    rotation: 0
    state: enabled
- name: virtual_sink_3_0_0_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2256, 1204.0]
    rotation: 0
    state: enabled
- name: virtual_sink_4
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: combined
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2120, 100.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 444.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 708.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 1180.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 1372.0]
    rotation: 0
    state: enabled
- name: virtual_source_0_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: unshifted_lora_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 1188.0]
    rotation: 0
    state: enabled
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: message
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 220.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: message
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 340.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: message
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 812.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: message
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 1004.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: message
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1616, 820.0]
    rotation: 0
    state: enabled
- name: virtual_source_2
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 524.0]
    rotation: 0
    state: enabled
- name: virtual_source_2_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 804.0]
    rotation: 0
    state: enabled
- name: virtual_source_2_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 1276.0]
    rotation: 0
    state: enabled
- name: virtual_source_2_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 1468.0]
    rotation: 0
    state: enabled
- name: virtual_source_2_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1856, 1284.0]
    rotation: 0
    state: enabled
- name: virtual_source_3
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1664, 36.0]
    rotation: 0
    state: true
- name: virtual_source_3_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1664, 108.0]
    rotation: 0
    state: enabled
- name: virtual_source_3_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1672, 188.0]
    rotation: 0
    state: enabled
- name: virtual_source_3_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1672, 252.0]
    rotation: 0
    state: enabled
- name: virtual_source_3_0_0_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shifted_lora_4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1664, 316.0]
    rotation: 0
    state: enabled
- name: virtual_source_4
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: combined
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1680, 484.0]
    rotation: 0
    state: true
- name: virtual_source_5
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: shift_source_0
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1680, 556.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', virtual_sink_2, '0']
- [analog_sig_source_x_0_0, '0', virtual_sink_2_0, '0']
- [analog_sig_source_x_0_0_0, '0', virtual_sink_2_0_0, '0']
- [analog_sig_source_x_0_0_0_0, '0', virtual_sink_2_0_0_0, '0']
- [analog_sig_source_x_0_0_0_0_0, '0', virtual_sink_2_0_0_0_0, '0']
- [blocks_add_xx_0, '0', qtgui_waterfall_sink_x_0, '0']
- [blocks_add_xx_0, '0', virtual_sink_4, '0']
- [blocks_divide_xx_0, '0', rational_resampler_xxx_0_0, '0']
- [blocks_message_strobe_0, strobe, epy_block_1, msg_in]
- [blocks_multiply_xx_0, '0', virtual_sink_3, '0']
- [blocks_multiply_xx_0_0, '0', virtual_sink_3_0, '0']
- [blocks_multiply_xx_0_0_0, '0', virtual_sink_3_0_0, '0']
- [blocks_multiply_xx_0_0_0_0, '0', virtual_sink_3_0_0_0, '0']
- [blocks_multiply_xx_0_0_0_0_0, '0', virtual_sink_3_0_0_0_0, '0']
- [epy_block_0, msg_out, blocks_msgpair_to_var_0, inpair]
- [epy_block_0_0, msg_out, blocks_msgpair_to_var_0_0, inpair]
- [epy_block_0_1, msg_out, blocks_msgpair_to_var_0_0_0, inpair]
- [epy_block_0_2, msg_out, blocks_msgpair_to_var_0_0_0_0, inpair]
- [epy_block_0_3, msg_out, blocks_msgpair_to_var_0_0_0_0_0, inpair]
- [epy_block_1, msg_out, virtual_sink_1, '0']
- [lora_rx_0, '0', blocks_file_sink_0, '0']
- [lora_tx_0, '0', virtual_sink_0, '0']
- [lora_tx_0_0, '0', virtual_sink_0_0, '0']
- [lora_tx_0_0_0, '0', virtual_sink_0_0_0, '0']
- [lora_tx_0_0_0_0, '0', virtual_sink_0_0_0_0, '0']
- [lora_tx_0_0_0_0_0, '0', virtual_sink_0_0_0_0_0, '0']
- [rational_resampler_xxx_0, '0', blocks_multiply_xx_0, '0']
- [rational_resampler_xxx_0_0, '0', lora_rx_0, '0']
- [rational_resampler_xxx_0_1, '0', blocks_multiply_xx_0_0, '0']
- [rational_resampler_xxx_0_1_0, '0', blocks_multiply_xx_0_0_0, '0']
- [rational_resampler_xxx_0_1_0_0, '0', blocks_multiply_xx_0_0_0_0, '0']
- [rational_resampler_xxx_0_1_0_0_0, '0', blocks_multiply_xx_0_0_0_0_0, '0']
- [virtual_source_0, '0', rational_resampler_xxx_0, '0']
- [virtual_source_0_0, '0', rational_resampler_xxx_0_1, '0']
- [virtual_source_0_0_0, '0', rational_resampler_xxx_0_1_0, '0']
- [virtual_source_0_0_0_0, '0', rational_resampler_xxx_0_1_0_0, '0']
- [virtual_source_0_0_0_0_0, '0', rational_resampler_xxx_0_1_0_0_0, '0']
- [virtual_source_1, '0', epy_block_0, msg_in]
- [virtual_source_1, '0', lora_tx_0, in]
- [virtual_source_1_0, '0', epy_block_0_0, msg_in]
- [virtual_source_1_0, '0', lora_tx_0_0, in]
- [virtual_source_1_0_0, '0', epy_block_0_1, msg_in]
- [virtual_source_1_0_0, '0', lora_tx_0_0_0, in]
- [virtual_source_1_0_0_0, '0', epy_block_0_2, msg_in]
- [virtual_source_1_0_0_0, '0', lora_tx_0_0_0_0, in]
- [virtual_source_1_0_0_0_0, '0', epy_block_0_3, msg_in]
- [virtual_source_1_0_0_0_0, '0', lora_tx_0_0_0_0_0, in]
- [virtual_source_2, '0', blocks_multiply_xx_0, '1']
- [virtual_source_2_0, '0', blocks_multiply_xx_0_0, '1']
- [virtual_source_2_0_0, '0', blocks_multiply_xx_0_0_0, '1']
- [virtual_source_2_0_0_0, '0', blocks_multiply_xx_0_0_0_0, '1']
- [virtual_source_2_0_0_0_0, '0', blocks_multiply_xx_0_0_0_0_0, '1']
- [virtual_source_3, '0', blocks_add_xx_0, '0']
- [virtual_source_3_0, '0', blocks_add_xx_0, '1']
- [virtual_source_3_0_0, '0', blocks_add_xx_0, '2']
- [virtual_source_3_0_0_0, '0', blocks_add_xx_0, '3']
- [virtual_source_3_0_0_0_0, '0', blocks_add_xx_0, '4']
- [virtual_source_4, '0', blocks_divide_xx_0, '0']
- [virtual_source_5, '0', blocks_divide_xx_0, '1']

metadata:
  file_format: 1
