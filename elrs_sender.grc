options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb_qt_gui
    hier_block_src_path: '.:'
    id: elrs_sender
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ExpressLRS Sender
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: period
  id: variable
  parameters:
    comment: ''
    value: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 324.0]
    rotation: 0
    state: enabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("e")
    period: period
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 484.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: period
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 492.0]
    rotation: 0
    state: enabled
- name: domain
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Domain
    short_id: ''
    type: str
    value: '"FCC915"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 12.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nFHSS_DOMAINS = {\n    \"AU915\" : {\n\
      \        \"start_freq\"  : 915500000,\n        \"end_freq\"    : 926900000,\n\
      \        \"center_freq\" : 921000000,\n        \"freq_count\"  : 20\n    },\n\
      \    \"FCC915\" : {\n        \"start_freq\"  : 903500000,\n        \"end_freq\"\
      \    : 926900000,\n        \"center_freq\" : 915000000,\n        \"freq_count\"\
      \  : 40\n    },\n    \"EU868\" : {\n        \"start_freq\"  : 865275000,\n \
      \       \"end_freq\"    : 869575000,\n        \"center_freq\" : 868000000,\n\
      \        \"freq_count\"  : 13\n    },\n    \"IN866\" : {\n        \"start_freq\"\
      \  : 865375000,\n        \"end_freq\"    : 866950000,\n        \"center_freq\"\
      \ : 866000000,\n        \"freq_count\"  : 4\n    },\n    \"AU433\" : {\n   \
      \     \"start_freq\"  : 433420000,\n        \"end_freq\"    : 434420000,\n \
      \       \"center_freq\" : 434000000,\n        \"freq_count\"  : 3\n    },\n\
      \    \"EU433\" : {\n        \"start_freq\"  : 433100000,\n        \"end_freq\"\
      \    : 434450000,\n        \"center_freq\" : 434000000,\n        \"freq_count\"\
      \  : 3\n    },\n    \"US433\" : {\n        \"start_freq\"  : 433250000,\n  \
      \      \"end_freq\"    : 438000000,\n        \"center_freq\" : 434000000,\n\
      \        \"freq_count\"  : 8\n    },\n    \"US433W\" : {\n        \"start_freq\"\
      \  : 423500000,\n        \"end_freq\"    : 438000000,\n        \"center_freq\"\
      \ : 434000000,\n        \"freq_count\"  : 20\n    },\n    \"ISM2G4\" : {\n \
      \       \"start_freq\"  : 2400400000,\n        \"end_freq\"    : 2479400000,\n\
      \        \"center_freq\" : 2440000000,\n        \"freq_count\"  : 80\n    }\n\
      }\n\nPACKET_RATE_LIMIT = 1000\n\nclass FHSSHandler:\n    def __init__(self,\
      \ domain_settings: dict[str, dict[str, int]]):\n        self.frequency_sequence:\
      \ list[int] = list()\n        self.frequency_index: int = 0\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    def\
      \ __init__(self, domain=\"FCC915\", packet_rate=25):  # only default arguments\
      \ here\n        gr.sync_block.__init__(\n            self,\n            name='Embedded\
      \ Python Block',   # will show up in GRC\n            in_sig=[],\n         \
      \   out_sig=[]\n        )\n\n        self.message_port_register_in(pmt.intern('trigger'))\n\
      \        self.set_msg_handler(pmt.intern('trigger'), self._initial_set)\n\n\
      \        self.message_port_register_out(pmt.intern('set_period'))\n        \n\
      \        if domain in FHSS_DOMAINS:\n            self.domain = FHSS_DOMAINS[domain]\n\
      \        else:\n            self.domain = FHSS_DOMAINS[\"FCC915\"]\n       \
      \     print(f'Provided domain, \\\"{domain}\\\", is not valid. Defaulting to\
      \ \\\"FCC915\\\".')\n\n        if packet_rate <= PACKET_RATE_LIMIT:\n      \
      \      self.packet_rate = packet_rate\n        else:\n            self.packet_rate\
      \ = PACKET_RATE_LIMIT\n            print(f'Provided packet rate, {packet_rate},\
      \ exceeds packet rate limit of {PACKET_RATE_LIMIT}.')\n        \n        self.counter\
      \ = 0\n\n        print('done 1')\n\n    def _initial_set(self, msg):\n     \
      \   self.set_msg_handler(pmt.intern('trigger'), self._trigger_handler)\n   \
      \     self.message_port_pub(pmt.intern('set_period'), pmt.cons(pmt.intern(\"\
      ignored_key\"), pmt.from_long(1000 // self.packet_rate)))\n        print('done\
      \ 2')\n        \n    def _trigger_handler(self, msg):\n        print(f'Test\
      \ {self.counter}')\n        self.counter += 1\n\n    def work(self, input_items,\
      \ output_items):\n        # output_items[0][:] = input_items[0] * self.example_param\n\
      \        # return len(output_items[0])\n        pass\n"
    affinity: ''
    alias: ''
    comment: ''
    domain: domain
    maxoutbuf: '0'
    minoutbuf: '0'
    packet_rate: packet_rate
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('domain', "'FCC915'"), ('packet_rate',
      '25')], [('trigger', 'message', 1)], [('set_period', 'message', 1)], '', ['domain',
      'packet_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 484.0]
    rotation: 0
    state: enabled
- name: packet_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Packet Rate
    short_id: ''
    type: intx
    value: '25'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 12.0]
    rotation: 0
    state: enabled
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: message
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 316.0]
    rotation: 0
    state: enabled

connections:
- [blocks_message_strobe_0, strobe, epy_block_0, trigger]
- [blocks_message_strobe_0, strobe, pad_sink_0, in]
- [epy_block_0, set_period, blocks_msgpair_to_var_0, inpair]

metadata:
  file_format: 1
  grc_version: 3.10.11.0
