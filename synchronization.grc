options:
  parameters:
    author: gabriel
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: synchronization
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: period
  id: variable
  parameters:
    comment: ''
    value: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 28.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("")
    period: period
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 484.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: period
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 476.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom hashlib import md5\nimport pmt\n\nFHSS_DOMAINS\
      \ = {\n    \"AU915\" : {\n        \"start_freq\"  : 915500000,\n        \"stop_freq\"\
      \    : 926900000,\n        \"center_freq\" : 921000000,\n        \"freq_count\"\
      \  : 20\n    },\n    \"FCC915\" : {\n        \"start_freq\"  : 903500000,\n\
      \        \"stop_freq\"    : 926900000,\n        \"center_freq\" : 915000000,\n\
      \        \"freq_count\"  : 40\n    },\n    \"EU868\" : {\n        \"start_freq\"\
      \  : 865275000,\n        \"stop_freq\"    : 869575000,\n        \"center_freq\"\
      \ : 868000000,\n        \"freq_count\"  : 13\n    },\n    \"IN866\" : {\n  \
      \      \"start_freq\"  : 865375000,\n        \"stop_freq\"    : 866950000,\n\
      \        \"center_freq\" : 866000000,\n        \"freq_count\"  : 4\n    },\n\
      \    \"AU433\" : {\n        \"start_freq\"  : 433420000,\n        \"stop_freq\"\
      \    : 434420000,\n        \"center_freq\" : 434000000,\n        \"freq_count\"\
      \  : 3\n    },\n    \"EU433\" : {\n        \"start_freq\"  : 433100000,\n  \
      \      \"stop_freq\"    : 434450000,\n        \"center_freq\" : 434000000,\n\
      \        \"freq_count\"  : 3\n    },\n    \"US433\" : {\n        \"start_freq\"\
      \  : 433250000,\n        \"stop_freq\"    : 438000000,\n        \"center_freq\"\
      \ : 434000000,\n        \"freq_count\"  : 8\n    },\n    \"US433W\" : {\n  \
      \      \"start_freq\"  : 423500000,\n        \"stop_freq\"    : 438000000,\n\
      \        \"center_freq\" : 434000000,\n        \"freq_count\"  : 20\n    },\n\
      \    \"ISM2G4\" : {\n        \"start_freq\"  : 2400400000,\n        \"stop_freq\"\
      \    : 2479400000,\n        \"center_freq\" : 2440000000,\n        \"freq_count\"\
      \  : 80\n    }\n}\n\nPACKET_RATE_LIMIT = 1000\nOTA_VERSION_ID = 4\n\ndef uid_mac_seed_get(uid:\
      \ bytes) -> int:\n    uid_list = list(uid)\n    return ((uid_list[2] << 24)\
      \ + (uid_list[3] << 16) + (uid_list[4] << 8) + (uid_list[5] ^ OTA_VERSION_ID))\
      \ & 0xFFFFFFFF\n\nclass FHSSRandom:\n    def __init__(self, seed: int):\n  \
      \      self._seed = seed\n\n    def rng_seed(self, new_seed: int) -> None:\n\
      \        self._seed = new_seed\n\n    def rng(self) -> int:\n        return\
      \ ((214013 * self._seed + 2531011) % 2147483648) >> 16\n\n    def rng_n(self,\
      \ max: int) -> int:\n        return self.rng() % max\n    \n    def rng_8_bit(self)\
      \ -> int:\n        return self.rng() & 0xFF\n    \n    def rng_5_bit(self) ->\
      \ int:\n        return self.rng() & 0x1F\n\nclass FHSSHandler:\n    def __init__(self,\
      \ uid: bytes, domain_settings: dict[str, int]):\n        self.sync_channel =\
      \ domain_settings['freq_count'] // 2\n        self.freq_range = domain_settings['stop_freq']\
      \ - domain_settings['start_freq']\n        self.freq_spread = self.freq_range\
      \ // (domain_settings['freq_count'] - 1)\n        self.band_count = (256 //\
      \ domain_settings['freq_count']) * domain_settings['freq_count']\n        self.rand\
      \ = FHSSRandom(uid_mac_seed_get(uid))\n        self.config = domain_settings\n\
      \n        self._frequencies = list()\n        self._index = 0\n\n        for\
      \ i in range(self.band_count):\n            if i % domain_settings['freq_count']\
      \ == 0:\n                self._frequencies.append(self.sync_channel)\n     \
      \       elif i % domain_settings['freq_count'] == self.sync_channel:\n     \
      \           self._frequencies.append(0)\n            else:\n               \
      \ self._frequencies.append(i % domain_settings['freq_count'])\n\n        for\
      \ i in range(self.band_count):\n            if i % domain_settings['freq_count']\
      \ != 0:\n                offset = (i // domain_settings['freq_count']) * domain_settings['freq_count']\n\
      \                rand = self.rand.rng_n(domain_settings['freq_count'] - 1) +\
      \ 1\n                self._frequencies[i], self._frequencies[offset + rand]\
      \ = self._frequencies[offset + rand], self._frequencies[i]\n\n    def get_init_freq(self)\
      \ -> int:\n        return self.config['start_freq'] + (self.sync_channel * self.freq_spread)\n\
      \    \n    def get_curr_index(self) -> int:\n        return self._index\n  \
      \  \n    def on_sync_channel(self) -> int:\n        return self._frequencies[self._index]\
      \ == self.sync_channel\n    \n    def set_curr_index(self, index: int) -> None:\n\
      \        self._index = index % self.band_count\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    def\
      \ __init__(self, domain=\"FCC915\", packet_rate=25, binding_phrase=\"DefaultBindingPhrase\"\
      ):  # only default arguments here\n        gr.sync_block.__init__(\n       \
      \     self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[]\n        )\n\n        self.message_port_register_in(pmt.intern('trigger'))\n\
      \        self.set_msg_handler(pmt.intern('trigger'), self._initial_set)\n\n\
      \        self.message_port_register_out(pmt.intern('set_period'))\n        self.message_port_register_out(pmt.intern('set_frequency'))\n\
      \        \n        if domain in FHSS_DOMAINS:\n            self.domain = FHSS_DOMAINS[domain]\n\
      \        else:\n            self.domain = FHSS_DOMAINS[\"FCC915\"]\n       \
      \     print(f'Provided domain, \\\"{domain}\\\", is not valid. Defaulting to\
      \ \\\"FCC915\\\".')\n\n        if packet_rate <= PACKET_RATE_LIMIT:\n      \
      \      self.packet_rate = packet_rate\n        else:\n            self.packet_rate\
      \ = PACKET_RATE_LIMIT\n            print(f'Provided packet rate, {packet_rate},\
      \ exceeds packet rate limit of {PACKET_RATE_LIMIT}.')\n\n        self.uid =\
      \ md5(str(f'-DMY_BINDING_PHRASE=\"{binding_phrase}\"').encode('utf-8')).digest()[:6]\n\
      \        self.fhss = FHSSHandler(self.uid, self.domain)\n        \n        self.counter\
      \ = 0\n\n    def _initial_set(self, msg):\n        self.set_msg_handler(pmt.intern('trigger'),\
      \ self._trigger_handler)\n        self.message_port_pub(pmt.intern('set_period'),\
      \ pmt.cons(pmt.intern(\"ignored_key\"), pmt.from_long(1000 // self.packet_rate)))\n\
      \        \n    def _trigger_handler(self, msg):\n        print(f'Test {self.counter}')\n\
      \        self.counter += 1\n\n    def work(self, input_items, output_items):\n\
      \        # output_items[0][:] = input_items[0] * self.example_param\n      \
      \  # return len(output_items[0])\n        pass\n"
    affinity: ''
    alias: ''
    binding_phrase: '''DefaultBindingPhrase'''
    comment: ''
    domain: '"FCC915"'
    maxoutbuf: '0'
    minoutbuf: '0'
    packet_rate: '25'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('domain', "'FCC915'"), ('packet_rate',
      '25'), ('binding_phrase', "'DefaultBindingPhrase'")], [('trigger', 'message',
      1)], [('set_frequency', 'message', 1), ('set_period', 'message', 1)], '', ['domain',
      'packet_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 484.0]
    rotation: 0
    state: enabled

connections:
- [blocks_message_strobe_0, strobe, epy_block_0, trigger]
- [epy_block_0, set_period, blocks_msgpair_to_var_0, inpair]

metadata:
  file_format: 1
